#pragma kernel CSMain
#include "Assets/CgIncludes/Noise.cginc"
#include "UnityCG.cginc"

struct Particle
{
	float3 position;
	float3 velocity;
	float4 color;
	//float test[10];
};

RWStructuredBuffer<Particle> _Particles;
//int _ParticlesCount;


float3 curlNoise( float3 p ){
  const float e = 0.0009765625;
  const float e2 = 2.0 * e;

  float3 dx = float3( e   , 0.0 , 0.0 );
  float3 dy = float3( 0.0 , e   , 0.0 );
  float3 dz = float3( 0.0 , 0.0 , e   );

  float3 p_x0 = snoise3D( p - dx );
  float3 p_x1 = snoise3D( p + dx );
  float3 p_y0 = snoise3D( p - dy );
  float3 p_y1 = snoise3D( p + dy );
  float3 p_z0 = snoise3D( p - dz );
  float3 p_z1 = snoise3D( p + dz );

  float x = p_y1.z - p_y0.z - p_z1.y + p_z0.y;
  float y = p_z1.x - p_z0.x - p_x1.z + p_x0.z;
  float z = p_x1.y - p_x0.y - p_y1.x + p_y0.x;

  return normalize( float3( x , y , z ) / e2 );
}


[numthreads(8,1,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
	float3 _velocity = curlNoise(_Particles[id.x].position)* 0.005;
	float3 pos = _Particles[id.x].position + _velocity;
	_Particles[id.x].position = pos;
	_Particles[id.x].velocity = _velocity;
	_Particles[id.x].color = _Particles[id.x].color;
}