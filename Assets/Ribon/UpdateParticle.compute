//http://developer.wonderpla.net/entry/blog/engineer/Unity_BoidsSimulation/

#pragma kernel CSMain
#include "Assets/CgIncludes/Noise.cginc"

struct Particle
{
	float3 position;
	float2 uv;
};

RWStructuredBuffer<Particle> _Particles;
float _Time;
int _ParticlesCount;


float3 CurlNoise3D(float3 p){
	float e = 0.0009765625;
  	float e2 = 2.0 * e;

 	float3 dx = float3( e   , 0.0 , 0.0 );
  	float3 dy = float3( 0.0 , e   , 0.0 );
  	float3 dz = float3( 0.0 , 0.0 , e   );

 	float3 p_x0 = snoise3D( p - dx );
  	float3 p_x1 = snoise3D( p + dx );
  	float3 p_y0 = snoise3D( p - dy );
  	float3 p_y1 = snoise3D( p + dy );
  	float3 p_z0 = snoise3D( p - dz );
  	float3 p_z1 = snoise3D( p + dz );

  	float x = p_y1.z - p_y0.z - p_z1.y + p_z0.y;
  	float y = p_z1.x - p_z0.x - p_x1.z + p_x0.z;
  	float z = p_x1.y - p_x0.y - p_y1.x + p_y0.x;

  	return normalize( float3( x , y , z ) / e2 );
}

//ここの最適化したら結構早くなるのでは　全部のGPUのコアをまんべんなく使ってやる的な
[numthreads(8,1,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
	_Particles[id.x].position = _Particles[id.x].position + CurlNoise3D(_Particles[id.x].position) * 0.1;
	_Particles[id.x].uv = _Particles[id.x].uv;
}